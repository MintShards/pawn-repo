import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport PaymentForm from '../PaymentForm';\nimport paymentService from '../../../../services/paymentService';\nimport transactionService from '../../../../services/transactionService';\n\n// Mock services\njest.mock('../../../../services/paymentService');\njest.mock('../../../../services/transactionService');\njest.mock('../../../../utils/errorHandling', () => ({\n  handleError: jest.fn(),\n  handleSuccess: jest.fn()\n}));\n\nconst mockTransaction = {\n  transaction_id: 'test-123',\n  customer_id: '1234567890',\n  status: 'active',\n  loan_amount: 1000,\n  pawn_date: '2024-01-15T00:00:00Z',\n  maturity_date: '2024-04-15T00:00:00Z'\n};\n\nconst mockBalance = {\n  current_balance: 1150,\n  principal_balance: 1000,\n  interest_due: 100,\n  extension_fees_balance: 50,\n  total_paid: 0\n};\n\ndescribe('PaymentForm', () => {\n  beforeEach(() => {\n    transactionService.getTransactionBalance.mockResolvedValue(mockBalance);\n    paymentService.processPayment.mockResolvedValue({\n      payment_id: 'payment-123',\n      payment_amount: 500\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders payment form with transaction details', async () => {\n    render(\n      <PaymentForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    expect(screen.getByText(/process payment/i)).toBeInTheDocument();\n    expect(screen.getByText(/transaction #test-123/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/payment amount/i)).toBeInTheDocument();\n  });\n\n  it('loads transaction balance on mount', async () => {\n    render(\n      <PaymentForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    await waitFor(() => {\n      expect(transactionService.getTransactionBalance).toHaveBeenCalledWith('test-123');\n    });\n    \n    await waitFor(() => {\n      expect(screen.getByText('$1,150.00')).toBeInTheDocument();\n    });\n  });\n\n  it('calculates payment breakdown correctly', async () => {\n    render(\n      <PaymentForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    // Wait for balance to load\n    await waitFor(() => {\n      expect(screen.getByText('$1,150.00')).toBeInTheDocument();\n    });\n    \n    // Enter payment amount\n    const paymentInput = screen.getByLabelText(/payment amount/i);\n    fireEvent.change(paymentInput, { target: { value: '500' } });\n    \n    await waitFor(() => {\n      expect(screen.getByText(/payment breakdown/i)).toBeInTheDocument();\n      expect(screen.getByText(/remaining balance/i)).toBeInTheDocument();\n    });\n  });\n\n  it('shows \"Pay Full\" button and calculates full redemption', async () => {\n    render(\n      <PaymentForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    // Wait for balance to load\n    await waitFor(() => {\n      expect(screen.getByText(/pay full/i)).toBeInTheDocument();\n    });\n    \n    // Click Pay Full button\n    const payFullButton = screen.getByText(/pay full/i);\n    fireEvent.click(payFullButton);\n    \n    await waitFor(() => {\n      const paymentInput = screen.getByLabelText(/payment amount/i);\n      expect(paymentInput.value).toBe('1150');\n      expect(screen.getByText(/transaction will be fully redeemed/i)).toBeInTheDocument();\n    });\n  });\n\n  it('validates payment amount limits', async () => {\n    render(\n      <PaymentForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    const paymentInput = screen.getByLabelText(/payment amount/i);\n    \n    // Test zero amount\n    fireEvent.change(paymentInput, { target: { value: '0' } });\n    fireEvent.blur(paymentInput);\n    \n    await waitFor(() => {\n      expect(screen.getByText(/payment amount must be greater than/i)).toBeInTheDocument();\n    });\n    \n    // Test excessive amount\n    fireEvent.change(paymentInput, { target: { value: '60000' } });\n    fireEvent.blur(paymentInput);\n    \n    await waitFor(() => {\n      expect(screen.getByText(/cannot exceed/i)).toBeInTheDocument();\n    });\n  });\n\n  it('shows confirmation dialog for large payments', async () => {\n    render(\n      <PaymentForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    // Wait for balance to load\n    await waitFor(() => {\n      expect(screen.getByText('$1,150.00')).toBeInTheDocument();\n    });\n    \n    // Enter large payment amount\n    const paymentInput = screen.getByLabelText(/payment amount/i);\n    fireEvent.change(paymentInput, { target: { value: '1000' } });\n    \n    const submitButton = screen.getByText(/process payment/i);\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText(/confirm large payment/i)).toBeInTheDocument();\n    });\n  });\n\n  it('shows redemption confirmation for full payments', async () => {\n    render(\n      <PaymentForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    // Wait for balance to load and click Pay Full\n    await waitFor(() => {\n      expect(screen.getByText(/pay full/i)).toBeInTheDocument();\n    });\n    \n    const payFullButton = screen.getByText(/pay full/i);\n    fireEvent.click(payFullButton);\n    \n    const submitButton = screen.getByText(/redeem transaction/i);\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText(/confirm transaction redemption/i)).toBeInTheDocument();\n    });\n  });\n\n  it('processes payment successfully', async () => {\n    const onSuccess = jest.fn();\n    render(\n      <PaymentForm \n        transaction={mockTransaction}\n        onSuccess={onSuccess}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    // Wait for balance and enter payment\n    await waitFor(() => {\n      expect(screen.getByText('$1,150.00')).toBeInTheDocument();\n    });\n    \n    const paymentInput = screen.getByLabelText(/payment amount/i);\n    fireEvent.change(paymentInput, { target: { value: '100' } });\n    \n    const submitButton = screen.getByText(/process payment/i);\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(paymentService.processPayment).toHaveBeenCalledWith({\n        transaction_id: 'test-123',\n        payment_amount: 100,\n        receipt_number: null,\n        internal_notes: null\n      });\n    });\n    \n    await waitFor(() => {\n      expect(onSuccess).toHaveBeenCalled();\n    });\n  });\n});"}