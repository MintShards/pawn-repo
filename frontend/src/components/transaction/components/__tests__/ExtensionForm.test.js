import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport ExtensionForm from '../ExtensionForm';\nimport extensionService from '../../../../services/extensionService';\n\n// Mock services\njest.mock('../../../../services/extensionService');\njest.mock('../../../../utils/errorHandling', () => ({\n  handleError: jest.fn(),\n  handleSuccess: jest.fn()\n}));\n\nconst mockTransaction = {\n  transaction_id: 'test-123',\n  customer_id: '1234567890',\n  status: 'active',\n  loan_amount: 1000,\n  maturity_date: '2024-04-15T00:00:00Z'\n};\n\nconst mockEligibility = {\n  is_eligible: true,\n  reason: null,\n  suggested_fee_per_month: 25,\n  warnings: []\n};\n\ndescribe('ExtensionForm', () => {\n  beforeEach(() => {\n    extensionService.checkExtensionEligibility.mockResolvedValue(mockEligibility);\n    extensionService.processExtension.mockResolvedValue({\n      extension_id: 'ext-123',\n      new_maturity_date: '2024-05-15T00:00:00Z'\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders form with transaction details', async () => {\n    render(\n      <ExtensionForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    expect(screen.getByText(/extend loan/i)).toBeInTheDocument();\n    expect(screen.getByText(/transaction #test-123/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/extension duration/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/fee per month/i)).toBeInTheDocument();\n  });\n\n  it('checks eligibility on mount', async () => {\n    render(\n      <ExtensionForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    await waitFor(() => {\n      expect(extensionService.checkExtensionEligibility).toHaveBeenCalledWith(\n        'test-123',\n        1 // Default 1 month\n      );\n    });\n  });\n\n  it('auto-populates suggested fee', async () => {\n    render(\n      <ExtensionForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    await waitFor(() => {\n      const feeInput = screen.getByLabelText(/fee per month/i);\n      expect(feeInput.value).toBe('25');\n    });\n  });\n\n  it('calculates total fee correctly', async () => {\n    render(\n      <ExtensionForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    await waitFor(() => {\n      expect(screen.getByText(/fee calculation/i)).toBeInTheDocument();\n    });\n    \n    // Change to 3 months\n    const durationSelect = screen.getByRole('combobox', { name: /duration/i });\n    fireEvent.click(durationSelect);\n    fireEvent.click(screen.getByText('3 Months'));\n    \n    await waitFor(() => {\n      // Should show 3 Ã— $25 = $75 total\n      expect(screen.getByText('$75.00')).toBeInTheDocument();\n    });\n  });\n\n  it('validates extension fee limits', async () => {\n    render(\n      <ExtensionForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    const feeInput = screen.getByLabelText(/fee per month/i);\n    \n    // Test excessive fee\n    fireEvent.change(feeInput, { target: { value: '600' } });\n    fireEvent.blur(feeInput);\n    \n    await waitFor(() => {\n      expect(screen.getByText(/cannot exceed \\$500/i)).toBeInTheDocument();\n    });\n  });\n\n  it('shows warning for overdue transactions', async () => {\n    const overdueTransaction = {\n      ...mockTransaction,\n      status: 'overdue'\n    };\n    \n    extensionService.checkExtensionEligibility.mockResolvedValue({\n      ...mockEligibility,\n      warnings: ['Transaction is overdue - additional charges may apply']\n    });\n    \n    render(\n      <ExtensionForm \n        transaction={overdueTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    await waitFor(() => {\n      expect(screen.getByText(/additional charges may apply/i)).toBeInTheDocument();\n    });\n  });\n\n  it('shows confirmation dialog before processing', async () => {\n    render(\n      <ExtensionForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    // Wait for eligibility check\n    await waitFor(() => {\n      expect(screen.getByText(/eligible for extension/i)).toBeInTheDocument();\n    });\n    \n    const submitButton = screen.getByText(/process extension/i);\n    fireEvent.click(submitButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText(/confirm loan extension/i)).toBeInTheDocument();\n    });\n  });\n\n  it('prevents submission when not eligible', async () => {\n    extensionService.checkExtensionEligibility.mockResolvedValue({\n      is_eligible: false,\n      reason: 'Transaction is in final status',\n      warnings: []\n    });\n    \n    render(\n      <ExtensionForm \n        transaction={mockTransaction}\n        onSuccess={jest.fn()}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    await waitFor(() => {\n      expect(screen.getByText(/not eligible/i)).toBeInTheDocument();\n    });\n    \n    const submitButton = screen.getByText(/process extension/i);\n    expect(submitButton).toBeDisabled();\n  });\n\n  it('processes extension successfully', async () => {\n    const onSuccess = jest.fn();\n    render(\n      <ExtensionForm \n        transaction={mockTransaction}\n        onSuccess={onSuccess}\n        onCancel={jest.fn()}\n      />\n    );\n    \n    // Wait for eligibility and submit\n    await waitFor(() => {\n      expect(screen.getByText(/eligible/i)).toBeInTheDocument();\n    });\n    \n    const submitButton = screen.getByText(/process extension/i);\n    fireEvent.click(submitButton);\n    \n    // Confirm in dialog\n    await waitFor(() => {\n      const confirmButton = screen.getByText(/process extension/i);\n      fireEvent.click(confirmButton);\n    });\n    \n    await waitFor(() => {\n      expect(extensionService.processExtension).toHaveBeenCalledWith({\n        transaction_id: 'test-123',\n        extension_months: 1,\n        extension_fee_per_month: 25,\n        internal_notes: null\n      });\n    });\n    \n    await waitFor(() => {\n      expect(onSuccess).toHaveBeenCalled();\n    });\n  });\n});"}